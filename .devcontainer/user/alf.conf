# @

# Run last line of output from previous command as current command
# https://askubuntu.com/a/621693
# https://superuser.com/a/912843
# @@: $($(fc -ln -1) |& tail -1)
bang: $($(fc -ln -1) |& tail -1)

#a

all-groups: cut -d: -f1 /etc/group | sort

awatch: watch $(alf which $@)


#b

beep: echo -e '\a'

#c
con: !
  c: conda create -n $(basename $(pwd)) python=$1 && conda activate $(basename $(pwd))
  k: [ ! -z $CONDA_PREFIX ] && python -m ipykernel install --user --name $(basename $CONDA_PREFIX) --display-name "Python ($(basename $CONDA_PREFIX))" || echo "Conda does not appear to be activated"
  ipy: [ ! -z $CONDA_PREFIX ] && ( pip install jupyter ipykernel && python -m ipykernel install --user --name $(basename $CONDA_PREFIX) --display-name "Python ($(basename $CONDA_PREFIX))") || echo "Conda does not appear to be activated"
  explicit: conda list --explicit > environment.txt
  export: conda env export > environment.yml

cuts: cut -c 8-

cachemem: cat /sys/fs/cgroup/memory/memory.stat |grep cache
  flush: !sudo sysctl vm.drop_caches=3

cert-refresh: sudo update-ca-certificates --fresh

clean: sudo apt autoremove && sudo apt clean && sudo apt autoclean && gem clean && sudo journalctl --vacuum-time=3d && rm -rf ~/.cache && d clean
  hard: --volumes

clip: !
  -f: xclip -sel clip < $1 && echo "clipped $1"
  -s: echo -n $1 | xclip -selection clipboard && echo "clipped $1"
  -p: pwd | xargs echo -n | xclip -selection clipboard && echo "clipped $(pwd)"
  -b: git rev-parse --abbrev-ref HEAD | xargs echo -n | xclip -selection clipboard && echo "clipped $(git rev-parse --abbrev-ref HEAD)"
  -branch: git rev-parse --abbrev-ref HEAD | xargs echo -n | xclip -selection clipboard && echo "clipped $(git rev-parse --abbrev-ref HEAD)"

compare-dir: diff --brief -Nr

copy: rsync
  progress: -ah --progress "$@"

# Count files in folder. Folder name is optional
count: ls -1 ${1:-.} | wc -l

cr: !
  logs: grep CRON /var/log/syslog

ctop: ctop -i


#d

d: docker
  b: build -t ${1:-temp} .
  ps: ps --format "{{.ID}} {{.Names}}\t{{.Status}}  {{.Ports}}"
  clean: system prune -f
  deploy: stack deploy -c $1.yml $1
  i: images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
  images: images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
  m: !docker-machine
  machine: !docker-machine
  n: network
  rmi: images --format "{{.Repository}}:{{.Tag}}" |grep $1 | xargs docker rmi -f
  rmv: volume ls --format "{{.Name}}" |grep $1 |xargs docker volume rm -f
  r: run -it --rm
  replicas: service ls --format='table {{.Name}}\t{{.Mode}}\t{{.Replicas}}'
  s: service
  st: stack
  size: images --format '{{.Size}}\t{{.Repository}}:{{.Tag}}' | sort -h | column -t
  stats: stats --format "{{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}"
  v: volume
  vls: volume ls | grep -i

  # ctop (container top)
  top: docker run -ti --name ctop --rm -v /var/run/docker.sock:/var/run/docker.sock wrfly/ctop:latest

dc: docker-compose
  r: run --rm
  ci: -f.ci/docker-compose.yml
  ls: config --services
  upd: up -d
  deploy: !docker stack deploy -c docker-compose.yml


docker-gen: [[ -z "$1" ]] && echo "usage: docker-gen <name>" || echo "$(jupyter-repo2docker --image-name $1 --debug --no-build .)" > Dockerfile

dclf: dc logs -f

dcr: dc r

decrypt: gpg2 -d

depth-view: python3 ~/src/system-scripts/depth_view.py $1

dfh: df -h |grep "sd\|vd"

dif: diff -u --color

dirfind: sudo find . -maxdepth ${2:-3} -type d -name "*$1*"

disks: ncdu -2rx

disk-tree: lsblk -e7 -o NAME,FSTYPE,LABEL,MOUNTPOINT,SIZE,MODEL
disk-uuid: sudo blkid | grep -i $1
disk-mounts: mount -v | grep "^/" | awk '{print "\nPartition identifier: " $1  "\n Mountpoint: "  $3}'

# more: https://github.com/cgoldberg/dotfiles/blob/master/.bash_aliases#L286
diskfree: df --sync --human-readable --type=ext4

dm: docker-machine

dns: host -t ${2:-ns} $1
  flush: !sudo systemd-resolve --flush-caches
  stats: !sudo systemd-resolve --statistics
  servers: !systemd-resolve --status | grep 'DNS Servers' -A2
  --flush: !dns flush && dns
  help: !echo -e "Usage:\n  dns example.com\n  dns example.com mx\n  dns --flush example.com\n  dns flush\n  dns stats"

dps: d ps
dpsa: d ps -a

# docker swarm
ds: !
  build: docker-compose -f $1.yml build
  deploy: docker stack deploy -c $1.yml $1
  launch: ds ls |xargs -L1 -i docker stack deploy -c {}.yml {}
  # list / deploy / stop all (based on ls *.yml)
  logs: docker service logs
  ls: ls -1 *.yml | sed -e 's/\..*$//'
  run: docker-compose -f $1.yml run ${@:2}
  status: docker stack ls && echo ----- && docker service ls --format 'table {{.Name}}\t{{.Replicas}}'
  stop: docker stack rm $1
  terminate: ds ls |xargs -L1 docker stack rm
  watch: watch -n5 "docker service ls --format 'table {{.Name}}\t{{.Replicas}}'"

dt: date
  secs: +"%Y-%m-%d-%s"
  day: +"%Y-%m-%d"

dush: sudo du -sh

#e

encrypt: gpg2 -c

#f

f: find |grep
ff: find . -xdev -iname "*$1*" ! -path "./.tox/*" ! -path "./.git/*" ! -path "./ENV/*" | grep -i --color=always "$1"
fd: fd --hidden --exclude .git
fingerprint: ssh-keygen -E md5 -lf

f-: [[ -z "$1" ]] && echo "usage: f- <directory> <term>" || find ~/"$1" -type d -name "*$2*"  | grep -i --color=always "$2"
find-in: find "$1" -type d -name "*$2*" | grep -i --color=always "$2"

ls-: stat -c "%n" *
ls-1: find . -maxdepth 1 -type d -exec sh -c 'cd -P "$0" && echo "" && pwd -P | grep -i --color {}  && stat -c "%s %n" * | numfmt --to=iec' {} \;
ls-2: find . -maxdepth 2 -type d -exec sh -c 'cd -P "$0" && echo "" && pwd -P | grep -i --color {}  && stat -c "%s %n" * | numfmt --to=iec' {} \;

fuck: eval $(thefuck $(fc -ln -1)) && history -r



#g

g: git
# g: !
  # basic
  -b: branch
  -c: add . --all && git commit -am
  -d: diff
  -m: merge
  -p: push
  -poh: push origin HEAD
  -s: status
  -ck: checkout
  -pl: pull
  # Pull current branch
  -pb: rev-parse --abbrev-ref HEAD | xargs -I {} sh -c "git pull origin {}"
  -rv: remote -v

  # commonly used
  new: checkout -b
  chmod: update-index --chmod
  retag: tag $1 -f && (git push origin --delete $1 || true) && git push origin $1
  discard: checkout -- . ; git clean -fd
  remote-delete: push origin --delete
  rebuild: commit --allow-empty -m "trigger rebuild" ; git push
  rename: branch -m
  rollback: diff --binary HEAD $1 | git apply

  # log related
  l: log --all --graph --date=relative --pretty=format:'%h %Cgreen%ad%Creset %Cblue%an%Creset%n        %s%n       %C(auto)%d%Creset'
  ll: log --graph --oneline --decorate --all
  lola: log --graph --decorate --pretty=oneline --abbrev-commit --all
  lol: log --graph --decorate --pretty=oneline --abbrev-commit
  tail: log -${1:-5} --all --date=relative --pretty=format:'%h %Cgreen%ad%Creset %x09%Cblue%s%Creset'
  datelog: log --pretty=format:'%C(cyan)%h %C(magenta)%ad %C(blue)%an%Creset%x09%s' --date=short
  history: log -p

  # less commonly used
  ls: ls-tree --full-name --name-only -r HEAD
  compare: diff --stat --color $1..HEAD
  optimize: repack -ad && sleep 2 && git gc
  resolve-ours: checkout --ours . ; git add -u ; git commit -m 'resolve conflicts with --ours'
  resolve-theirs: checkout --theirs . ; git add -u ; git commit -m 'resolve conflicts with --theirs'
  shallow-clone: clone --depth 1
  upstream: checkout master && git fetch upstream && git merge upstream/master
  tagsha: show-ref --abbrev=7 --tags

  # show age of all git repos in subdirectories
  age: !for d in ./*/; do echo -e "\n\e[34m$d\e[0m" ; git -C $d log -1 --all --date=relative --pretty=format:'%Cgreen%ad%Creset %x09%s%n' ; done;

  # utilities
  analyze: ls-files | xargs -n1 git blame --line-porcelain | sed -n 's/^author //p' | sort -f | uniq -ic | sort -nr



gg: g p
ggt: gg && gg --tag
gpl: g pl
ggc: g c "$*" && gg

geoip: curl http://api.db-ip.com/v2/free/$1

# GitHub API - example usage: github /user/repos
github: curl -H "Authorization: token $GITHUB_ACCESS_TOKEN" https://api.github.com$1

google: python -c "import webbrowser; webbrowser.open('https://www.google.com/search?q=$(local IPS="+"; echo "${@/#/$d}";)')" > /dev/null 2>&1

#h

# history append, cut, search
# search command history by regex (case-insensitive) show last n matches
# usage: h <flag> <pattern>
# comm -23 <( HISTTIMEFORMAT="" history | cut -c 8- ) ~/.bash_history
h: HISTTIMEFORMAT="" history
  -a: -a
  -ae: -a && exit
  -c: $1 | cut -c 8-
  -s: | grep -i --color=always "$1" | tail -n 100 | cut -c 8-
  --export: 0 && [[ -z "$1" ]] && echo "usage: h --export <num lines>" || echo "$(HISTTIMEFORMAT='' history $1 | cut -c 8-)" > history.sh


helpman: python -c "import webbrowser; webbrowser.open('https://manpages.debian.org/${1}')" > /dev/null 2>&1

hk: heroku

https: http ${@:1:$((${#@}-1))} https://${@: -1}

#i

inst: sudo apt install

ip-goog: dig TXT +short o-o.myaddr.l.google.com @ns1.google.com | awk -F'"' '{ print $2}'
ip-pub: dig +short myip.opendns.com @resolver1.opendns.com
ip-addr: ip addr | grep 'state UP' -A2 | tail -n1 | awk '{print $2}' | cut -f1  -d'/'
ip-addr2: ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1'
ip-vpn: ip -o route get to 8.8.8.8 | sed -n 's/.*src \([0-9.]\+\).*/\1/p'
# ip-addr2: ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p'

#j

# Create animated gif - delay parameter is optional
jpg2gif: convert -delay ${1:-300} -loop 0 *.jpg animated.gif

#k

killport: [[ $(lsof -ti:$1) ]] && kill -9 $(lsof -ti:$1)

kl: kubectl
klg: kubectl get

#l

l: ls -lh
ll: ls -lah

less: less -Sr

listen: lsof -P -i -n

#m

# myip: ifconfig |head -n2 |sed -rn 's/.*addr:([^ ]+) .*/\1/p'
mod: sudo chmod gu+x $1

mounts: sudo findmnt --verify --verbose

#n

# NVidia memory clear
# ref: https://forums.developer.nvidia.com/t/11-gb-of-gpu-ram-used-and-no-process-listed-by-nvidia-smi/44459/13
# ref: https://stackoverflow.com/a/51143269/3450793
gpu-dev: find /dev -regex '.*nvidia[0-9][0-9]?'
gpu-proc-id: for d in $(find /dev -regex '.*nvidia[0-9][0-9]?'); do sudo lsof $d | grep python | awk '{print $2}' | sort -u ; done
gpu-proc-list: for d in $(find /dev -regex '.*nvidia[0-9][0-9]?'); do sudo lsof $d | grep python ; echo $i; done
gpu-kill: [[ -z "$1" ]] && echo "usage: gpu-kill <gpu_id>" || (for i in $(sudo lsof /dev/nvidia$1 | grep python  | awk '{print $2}' | sort -u); do sudo kill -9 $i; done)
gpu-kill-a: for d in $(find /dev -regex '.*nvidia[0-9][0-9]?'); do sudo lsof $d | grep python | awk '{print $2}' | sort -u ; sudo kill -9 $i ; done
gpu-mem-clear: for d in $(find /dev -regex '.*nvidia[0-9][0-9]?'); do sudo lsof $d | grep python | awk '{print $2}' | sort -u ; sudo kill -9 $i ; done
nvidia-dev: gpu-dev
nvidia-proc-id: gpu-proc-id
nvidia-proc-list: gpu-proc-list
nvidia-kill: gpu-kill
nvidia-kill-a: gpu-kill-a
nvidia-mem-clear: gpu-mem-clear


nv: env |grep -i
npzv: conda activate npzviewer && npzviewer

#o

o: xdg-open "$@" > /dev/null 2>&1

outdated:  /usr/lib/update-notifier/apt-check --human-readable && echo "Run 'outdated list' to show upgradable packages"
  list: !apt list --upgradable

own: sudo chown -R $USER:$USER .

#p

para: !
    -dl: echo "Downloading files from $1 in parallel to $2" && parallel -a $1 -j0 'wget {} -P $2'

# search process info by regex (case-insensitive)
# usage: psgrep <pattern>
psgrep: ps -ef | grep -i --color=always "$1" | grep -v "grep" | sort -n | less

# List installed perl modules
perlmod: perl -MFile::Find=find -MFile::Spec::Functions -Tlwe 'find { wanted => sub { print canonpath $_ if /\.pm\z/ }, no_chdir => 1 }, @INC'

pkg-info: python -c "import webbrowser; webbrowser.open('https://packages.ubuntu.com/jammy/${1}')" > /dev/null 2>&1

# Create animated gif - delay parameter is optional
png2gif: convert -delay ${1:-300} -loop 0 *.png animated.gif

port: sudo lsof -i :$1

ports: sudo netstat -tulpn | grep LISTEN | grep -Po '(?<=:)(\d{2,5})' | sort -n  | uniq | tr '\n' '\t'; printf "\n"

portinfo: netstat -tulanp

psf: ps -ef |grep

py: python3

# If python2 is not installed set python3 as alias
python: command -v python > /dev/null && command python "$@" || command python3 "$@"
pip: command -v pip > /dev/null && command pip "$@" || command pip3 "$@"


#r

redis: redis-cli

# repeat 5 echo hello
repeat: for i in `seq $1`; do ${@:2} ; done

repo-info: curl -s https://api.github.com/repos/planetceres/$1 | jq '{name: .full_name, forks: .forks_count, stars: .stargazers_count, watchers: .watchers_count, issues: .open_issues_count, subscribers: .subscribers_count}'

runas: sudo su -s /bin/sh $1 -c "$2"

sad: ssh-add

search: grep -ri

space: sudo ncdu --exclude /vagrant --exclude /store /

ssh-testkey: ssh-keygen -t rsa -C "bobbo@henna.com" -f id_rsa -N ''
ssh-create: [ -z $1 ] && echo "Usage:      ssh-create <key_name>" || ssh-keygen -b 4096 -f $HOME/.ssh/$1 -q -N ""


#t

tails: !
  ip: tailscale ip | head -n 1
  up: sudo tailscale up --accept-routes=true
  down: sudo tailscale down


t2: [ $(terminal-emulator) = "terminator" ] && python2 /usr/bin/terminator || python2 /usr/bin/terminator && [ $(terminal-emulator) = "gnome-terminal-server" ] && exit
terminal-emulator: basename "/"$(ps -f -p $(cat /proc/$(echo $$)/stat | cut -d \  -f 4) | tail -1 | sed 's/^.* //')

# Check for newlines and indents on file ($1), especially for Makefiles. https://stackoverflow.com/a/16945143/3450793
tab-check: cat -e -t -v $1

trees: tree
  ls: -ash -CF --du

test-arg: [ -z $1 ] && echo "Valid: None" || echo "Valid arg: $1"
test-t2: [ $(terminal-emulator) = "terminator" ] && echo "Using Terminator" || echo "Terminal: $(terminal-emulator)"

# test: echo $1
#   c: $1 | cut -c 8-
#   e: | echo $1
#   a: | echo $@

# tracert: sudo traceroute -I
tracert: mtr


#u

uninst: sudo apt remove

untar: tar zxvf $1

update: sudo apt update && sudo apt upgrade && sudo apt autoremove

#v

ver: cat /etc/os-release

#w

w-: watch -n 0.25 $1

web: !
  scrape-urls: wget -qO- $1 | sed -n 's/.*href="\([^"]*\).*/\1/p'
  search: python -c "import webbrowser; webbrowser.open('https://www.google.com/search?q=$(local IPS="+"; echo "${@/#/$d}";)')" > /dev/null 2>&1

what: alf which

# open any command in a new tmux window or pane
tm: !
  ww: tmux new-window
  ws: tmux split-window

#y

